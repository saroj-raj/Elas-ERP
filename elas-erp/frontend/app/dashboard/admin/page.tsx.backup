"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";

interface Widget {
  id: string;
  type: string;
  title: string;
  data: any;
  config?: any;
}

export default function AdminDashboard() {
  const [widgets, setWidgets] = useState<Widget[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    try {
      const uploadResponse = localStorage.getItem('uploadResponse');
      
      if (uploadResponse) {
        const data = JSON.parse(uploadResponse);
        console.log('üìä Loaded widgets from localStorage:', data);
        setWidgets(data.widgets || []);
      } else {
        console.log('‚ö†Ô∏è No uploadResponse found in localStorage');
        setError('No dashboard data found. Please upload data from the onboarding page.');
      }
      
      setLoading(false);
    } catch (err) {
      console.error('Error loading widgets:', err);
      setError('Failed to load dashboard data');
      setLoading(false);
    }
  }, []);

  const renderWidget = (widget: Widget) => {
    // Render different widget types
    if (widget.type === 'bar_chart' || widget.type === 'line_chart') {
      return (
        <div className="bg-white rounded-xl shadow-md p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">{widget.title}</h3>
          <div className="h-64 flex items-center justify-center bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg border-2 border-dashed border-gray-300">
            <div className="text-center">
              <span className="text-6xl mb-2 block">üìä</span>
              <p className="text-gray-700 font-medium text-lg mb-2">{widget.type.replace('_', ' ').toUpperCase()}</p>
              {widget.config?.x_column && widget.config?.y_column && (
                <p className="text-sm text-gray-600">
                  {widget.config.y_column} vs {widget.config.x_column}
                </p>
              )}
              <p className="text-xs text-gray-500 mt-3 max-w-xs mx-auto">
                Chart visualization will be implemented with a charting library
              </p>
            </div>
          </div>
          {widget.config?.description && (
            <p className="text-sm text-gray-600 mt-4 italic">{widget.config.description}</p>
          )}
        </div>
      );
    }

    if (widget.type === 'pie_chart') {
      return (
        <div className="bg-white rounded-xl shadow-md p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">{widget.title}</h3>
          <div className="h-64 flex items-center justify-center bg-gradient-to-br from-green-50 to-blue-50 rounded-lg border-2 border-dashed border-gray-300">
            <div className="text-center">
              <span className="text-6xl mb-2 block">ü•ß</span>
              <p className="text-gray-700 font-medium text-lg mb-2">PIE CHART</p>
              {widget.config?.category_column && widget.config?.value_column && (
                <p className="text-sm text-gray-600">
                  {widget.config.value_column} by {widget.config.category_column}
                </p>
              )}
              <p className="text-xs text-gray-500 mt-3 max-w-xs mx-auto">
                Chart visualization will be implemented with a charting library
              </p>
            </div>
          </div>
          {widget.config?.description && (
            <p className="text-sm text-gray-600 mt-4 italic">{widget.config.description}</p>
          )}
        </div>
      );
    }

    if (widget.type === 'kpi') {
      const value = widget.data?.[0]?.[widget.config?.metric_column] || 'N/A';
      return (
        <div className="bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl shadow-lg p-6 text-white">
          <h3 className="text-sm font-medium opacity-90 mb-2 uppercase tracking-wide">{widget.title}</h3>
          <div className="text-5xl font-bold mb-2">{value}</div>
          {widget.config?.description && (
            <p className="text-sm opacity-90">{widget.config.description}</p>
          )}
          {widget.config?.metric_column && (
            <p className="text-xs opacity-75 mt-2">Metric: {widget.config.metric_column}</p>
          )}
        </div>
      );
    }

    if (widget.type === 'table') {
      const columns = widget.config?.columns || Object.keys(widget.data?.[0] || {});
      const displayData = (widget.data || []).slice(0, 5);
      
      return (
        <div className="bg-white rounded-xl shadow-md p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">{widget.title}</h3>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  {columns.map((col: string) => (
                    <th key={col} className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      {col}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {displayData.map((row: any, idx: number) => (
                  <tr key={idx} className="hover:bg-gray-50">
                    {columns.map((col: string) => (
                      <td key={col} className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">
                        {row[col]}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
            {widget.data && widget.data.length > 5 && (
              <p className="text-xs text-gray-500 mt-2 text-center">
                Showing 5 of {widget.data.length} rows
              </p>
            )}
          </div>
          {widget.config?.description && (
            <p className="text-sm text-gray-600 mt-4 italic">{widget.config.description}</p>
          )}
        </div>
      );
    }

    // Default widget rendering
    return (
      <div className="bg-white rounded-xl shadow-md p-6 border-2 border-dashed border-gray-300">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">{widget.title}</h3>
        <div className="h-48 flex items-center justify-center bg-gray-50 rounded-lg">
          <div className="text-center">
            <span className="text-4xl mb-2 block">üìà</span>
            <p className="text-gray-600 font-medium">Widget Type: {widget.type}</p>
            <p className="text-xs text-gray-500 mt-2">Widget placeholder</p>
          </div>
        </div>
        {widget.config?.description && (
          <p className="text-sm text-gray-600 mt-4 italic">{widget.config.description}</p>
        )}
      </div>
    );
  };
  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">
          Admin Dashboard
        </h1>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <Card>
            <div className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Total Users
              </h3>
              <p className="text-3xl font-bold text-blue-600">1,234</p>
              <p className="text-sm text-gray-500 mt-2">+12% from last month</p>
            </div>
          </Card>

          <Card>
            <div className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Revenue
              </h3>
              <p className="text-3xl font-bold text-green-600">$45,678</p>
              <p className="text-sm text-gray-500 mt-2">+8% from last month</p>
            </div>
          </Card>

          <Card>
            <div className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Active Projects
              </h3>
              <p className="text-3xl font-bold text-purple-600">23</p>
              <p className="text-sm text-gray-500 mt-2">5 completed this week</p>
            </div>
          </Card>
        </div>

        <div className="mt-8">
          <Card>
            <div className="p-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">
                Quick Actions
              </h2>
              <div className="space-y-3">
                <a
                  href="/onboarding/documents"
                  className="block px-4 py-3 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors"
                >
                  <span className="font-medium text-blue-900">üìä Upload Data</span>
                  <p className="text-sm text-blue-700">Upload CSV/Excel files for Quick Viz</p>
                </a>
                <div className="block px-4 py-3 bg-gray-50 rounded-lg">
                  <span className="font-medium text-gray-900">üìà View Reports</span>
                  <p className="text-sm text-gray-600">Coming soon...</p>
                </div>
                <div className="block px-4 py-3 bg-gray-50 rounded-lg">
                  <span className="font-medium text-gray-900">‚öôÔ∏è Settings</span>
                  <p className="text-sm text-gray-600">Coming soon...</p>
                </div>
              </div>
            </div>
          </Card>
        </div>

        <div className="mt-8 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
          <h3 className="font-semibold text-yellow-900 mb-2">üîç Debug Info:</h3>
          <p className="text-sm text-yellow-800">
            Groq AI responses are logged to: <code className="bg-yellow-100 px-2 py-1 rounded">elas-erp/GROQ_DEBUG.log</code>
          </p>
          <p className="text-sm text-yellow-800 mt-2">
            View with: <code className="bg-yellow-100 px-2 py-1 rounded">Get-Content elas-erp\GROQ_DEBUG.log -Tail 50</code>
          </p>
        </div>
      </div>
    </div>
  );
}
